/**
 * Author: Steven Dunn
 * Date Created: December 10, 2017
 * Dependencies: TSLint
 */
{
    "defaultSeverity": "error",
    // The rules below extend TSLint's recommended rules.
    // https://github.com/palantir/tslint/blob/master/src/configs/recommended.ts
    "extends": [
      "tslint:recommended"
      //"rxjs-tslint-rules", // Removed because rxjs-tslint-rules doesn't support RXJS 7, and we need to migrate to ESLint eventually anyway.
      //"tslint-eslint-rules"
    ],
    "linterOptions": {
      "exclude": [
        "node_modules/"
      ]
    },
    // Any rules in jsRules ad rules will override those from the base config we are extending.
    // See https://palantir.github.io/tslint/rules/
    // For TSLint and ESLint Rule comparisons, see https://github.com/buzinas/tslint-eslint-rules
    "jsRules": {},
    "rules": {
      "arrow-parens": false,
      "class-name": true,
      "comment-format": [
        false,
        "check-space"
      ],
      "curly": true,
      "eofline": true,
      "forin": true,
      "indent": [
        true,
        "spaces"
      ],
      "interface-name": [true, "never-prefix"],
      "label-position": true,
      //"label-undefined": true, // Deprecated
      "max-classes-per-file": [true, 2],
      "max-line-length": [
        false,
        140
      ],
      "member-access": false,
      // Todo: This syntax no longer works. We should enforce ordering most of the time.
      "member-ordering": [
        true,
        // TSLint 5 only required these two settings
        // "static-before-instance",
        // "variables-before-functions"
        // TSLint 6 equivalent:
        {
          "order": [
            {
              "name": "static field",
              "kinds": [
                "public-static-field",
                "protected-static-field",
                "private-static-field"
              ]
            },
            {
              "name": "instance field",
              "kinds": [
                "public-instance-field",
                "protected-instance-field",
                "private-instance-field"
              ]
            },
            {
              "name": "static method",
              "kinds": [
                "public-static-method",
                "private-static-method",
                "protected-static-method"
              ]
            },
            {
              "name": "instance method",
              "kinds": [
                "public-constructor",
                "protected-constructor",
                "private-constructor",
                "public-instance-method",
                "protected-instance-method",
                "private-instance-method"
              ]
            }
          ]
        }
      ],
      //"member-ordering": [
      //  true,
      //  {
      //    "order": "fields-first"
      //  }
      //],
      "no-arg": true,
      "no-async-without-await": true,
      "no-bitwise": true,
      "no-console": [
        true,
        "debug",
        "info",
        "time",
        "timeEnd",
        "trace"
      ],
      "no-construct": true,
      "no-conditional-assignment": true,
      "no-debugger": true,
      //"no-duplicate-key": true, // Deprecated
      "no-duplicate-variable": true,
      "no-empty": false,
      "no-eval": true,
      "no-for-in": true,
      "no-inferrable-types": true,
      // CAUTION: This rule from tslint-eslint-rules works with TSLint and the tslint-loader, but does not work with the tslint-webpack-plugin.
      // The plugin will throw this error: [tslint-plugin] Failed to parse json...
      "no-multi-spaces": true,
      "no-shadowed-variable": true,
      "no-string-literal": false,
      "no-switch-case-fall-through": true,
      "no-trailing-whitespace": false,
      "no-unused-expression": true,
      //"no-unused-variable": true, // Deprecated. WARNING: Do NOT use this.
      //"no-unreachable": true, // Deprecated
      //"no-use-before-declare": true, // Should not be used with TS. See https://palantir.github.io/tslint/rules/no-use-before-declare/
      "no-var-keyword": true,
      "object-literal-sort-keys": false,
      "one-line": [
        true,
        "check-open-brace",
        "check-catch",
        //"check-else", // Allow for if/else on a second line, but require open brackets on the same line (i.e. stroustrup style)
        "check-whitespace"
      ],
      "ordered-imports": false,
      "prefer-const": false,
      "prefer-for-of": false,
      "quotemark": {
        "severity": "warning",
        "options": [
          true,
          "single",
          "avoid-escape"
        ]
      },
      //"rxjs-no-add": { "severity": "error" }, // See https://blog.angularindepth.com/rxjs-understanding-lettable-operators-fe74dda186d3
      // Removed because rxjs-tslint-rules doesn't support RXJS 7, and we need to migrate to ESLint eventually anyway.
      //"rxjs-no-internal": { "severity": "error" }, // See https://blog.angularindepth.com/rxjs-tslint-rules-for-version-6-d10e2482292d
      "radix": true,
      "semicolon": [
        true,
        "always",
        "strict-bound-class-methods"
      ],
      "trailing-comma": false,
      "triple-equals": [
        true,
        "allow-null-check"
      ],
      "typedef-whitespace": [
        true,
        {
          "call-signature": "nospace",
          "index-signature": "nospace",
          "parameter": "nospace",
          "property-declaration": "nospace",
          "variable-declaration": "nospace"
        }
      ],
      "variable-name": false,
      "whitespace": [
        true,
        "check-branch",
        "check-decl",
        "check-operator",
        "check-separator",
        "check-type"
      ]
    },
    // A list of relative or absolute paths to directories that contain custom rules.
    "rulesDirectory": []
}
